plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.mikeprimm.com' }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation include("me.lucko:fabric-permissions-api:${project.permission_api_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")
    modImplementation include("eu.pb4:player-data-api:${project.player_data_api_version}")
    modImplementation include("xyz.nucleoid:server-translations-api:${project.translations_version}")
    implementation include("org.spongepowered:configurate-hocon:${project.configurate_hocon_version}")

    // Mod compat
    modCompileOnly "maven.modrinth:styled-chat:${project.styled_chat_version}"
    compileOnly "com.github.BlueMap-Minecraft:BlueMapAPI:${project.bluemap_api_version}"
    compileOnly "us.dynmap:DynmapCoreAPI:${project.dynmap_api_version}"
    compileOnly("xyz.jpenilla:squaremap-api:${project.squaremap_api}")
}

shadowJar {
    minimize()
    archiveClassifier.set("shadow")
    configurations = [project.configurations.shadow]
    from sourceSets.main.output
}

remapJar {
    from zipTree(shadowJar.archiveFile) dependsOn shadowJar
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}

//Mixin hotswap
afterEvaluate {
    loom.runs.configureEach {
        // https://fabricmc.net/wiki/tutorial:mixin_hotswaps
        vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
    }
}